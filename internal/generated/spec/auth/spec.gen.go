// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWzW7bRhB+FWLaI2vJTVAEvKmpERio3cI/vQQ6sNRI2lTcpXeXbgVDgCz3J4cALfoA",
	"RXvqVVArRLBr+RVm36jYpWSRFiUrgQ3kIpH7880337czyzOIRJwIjlwrCM5AokoEV+heaqluH8wG7Hsk",
	"uEau7WOYJB0WhZoJXnmlBLdjKmpjHNqnjyU2IYCPKgvwSjarKgXQXq/nQwNVJFlisSAA+t2c09gzP9HU",
	"9GlqXtMUej7sSCnkg5Mpopax+dsMaPqJ/fHo2vIa0JAuLaMXqGtRhEoddRN8cGbl6Jvq1fNnYUp9TKRI",
	"UGqWuRy6MPfxORLfIbdpS2xKVO0N17sNJymT2IDg5TzWAsWfDdksoe6Dtv8BiG9fYaRLfS+Sj1GpsOUm",
	"ZluVloy3liLPF5bFWOlkmVCOaXAGyNPYAte+2NvdBx/2avu1FzsH4MPz48Ojr/Z2DnKxVpC6J/dD5I1v",
	"ULJm97lo4AGepKj0Mi+MQ9a5X4FsWd3ishbf5e+M50MSKvW9kI1Ng+V2lObHWvw4WckjEo28sYxrbKG0",
	"G1czbDKp9H4YY+lsJ1wz+e7JLYLloHNAfpZCWepZeSxL/0PCJKqaU6MpZBzqLPPPnoJfIoSew6wnnC3z",
	"c/B110kYbwq7+05H+YvGpk8jmphzj4Y0st3P9GlCb2lofqYJTSwZpjs2pG0u3iHKUxbZ5E9RqgymulXd",
	"2rYkRYI8TBgE8GSruvXEKaTbLt9KmOp2ZdGBWqhL+PxWoDAxfXNBYzPw6IamdGXe0Fua0oiGZkBjujK/",
	"ejTyzLml70b+ozE4FtI14t0GBK7kU92uzftREsowRo1SQfDyDJiNe5Ki7IIP3J0YSBVK8HPt+9afNGUN",
	"WK71ul+8Tj+tVld1zdt1q/q+D0832X33PvNBpXEcyu6yjM5Jq9UKEW1CYcvKAcc287pFy/xShb7kTrFQ",
	"Zcb9YQZ0Y/r2DNHEDMwbjy5pSv96NHJHbGJ+pAld5k5V0aWvhXI2FRshZIcblf5cNLoPduOWd9tesZa0",
	"TLFX7msxd3NhzumGxuY1Xdtvh2lOiisa0/VMirsmrZbsmobOLPOLGZiLdfa49r7Glkeop1unstiP5FDh",
	"3trIme37a6b4QfphFZq7INc4+SeN6Z/MGFdOD+zkcfKITi5u/g/XyaK+7+GkhUN5Or9XivZ9KaKw42Xz",
	"4EMqOxBAW+skqFQ6dq4tlA6eVZ9tV6BX7/0fAAD//xDHds6sDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

