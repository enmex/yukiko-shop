// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWXY/bRBT9K9GFR3edUh4qv2UTL7UUOcWbVEAVRca+2UyJPdOZcWFVRdpdBOIBCcQv",
	"gCdeV4uiRhTCX7j+R2jGS/Ox3g9WQeIlsufOnDn3HM+ZvIaEZ4LnmGsF3muQqATPFdqXVqEn0eWAeU94",
	"rjHX5jEWYsqSWDOeuy8Uz82YSiaYxebpfYlj8OA9dwXuVlXlboDOZjMHUlSJZMJggQf0U3lK80b5DS3L",
	"E1qW39ESZg74UnK5czKbqHVsfi3PaPnA/DToT8PrjM7pdzAzL0HqlBKSC5SaVTrGhZ7cxmSgUPb5F5ib",
	"ZoXkYzbFu6yxTCS+LJjEFLzn1WYriKED+lggeMA/f4GJrtVyky6acpuntoR5kRnY/VZnFPkfD/zDPjjw",
	"rNUNOq1+0AtHB62g63fAgUHYGvSf9KLgM/t60Iv2g07HD8GBsNcfHfQGoRlv98KDbtDu2yndThB+NOr4",
	"T/tPRv4nbd/v2LXtT9vdoD26rIMDQdj3o7DVHR360TM/GvlR1IvWelNasvzI9JahUvGRpb5V29Jp1eVq",
	"UZ1Yh+woD/IIXxaodI1YWcymNbs5IGKlvuQyvQMVi7G24joeA3EPHmMmlQ7jDGur0/iG4r9vYbXZGvQt",
	"nVWf/dWOvhJMomrZZsdcZrEGD9JY4wPNLOoVvvofpJvJVtOctR2GMwfsadqZrizdoF0ULK1jvCP5Lfid",
	"Pbhs9hrd4yRBpW7LnndZJXEsUU3uOH87rKq9VihDm8EsH3MDuJXFv9C8PKELWpSnDTqnC5PK5Qkt6A2d",
	"l9/SghZGYqZNctpIbhyifMUS0/0rlKqCae419x4a5lxgHgsGHjzaa+49shLpie3cNSnqKnv0rUK8OnNb",
	"hH7c4LAoT8qvaV6eNegvWtLb8nt6Q0u6oPPyjOb0tvyhQReN8tTwtyN/0BwsDWnvriAFD55ypQ31Knag",
	"kguV3ufp8c6uvc1Mm226omWBdmDtn8AHzYfXYb6bt3WzO/Bhs3n7ou0b2AFVZFksj6/qaz02Il6jrjE/",
	"PlLmu7JneWjQVk4OxA1O/kxz+q0yxuy2aycH4j90cnUr/H+d3NT3Hk4aOJTmFIP3fNu+Lk/iaaOqgwOF",
	"nIIHE62F57pTU5twpb3HzcdNF2bD2d8BAAD//5kcrbL1CgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

