// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWzW7bRhB+FWLaI2vJTVAEvKmpERio3UK2ewl0YKmRtKnIpXeXbgVDgCz3J4cALfoA",
	"RXvqVVUrRLBr+RVm36jYpWSRESkrhYzkYovc3W+++T7OzJ5DwMOYRxgpCd45CJQxjyTah1qiOvX5C/Mc",
	"8EhhpMxPP467LPAV41HlheSReSeDDoa++fWhwBZ48EFlCV5JV2UlB9rv911oogwEiw0WeEC/6guaOPoH",
	"mukBzfRLmkHfhT0huNg6mTxqEZs/9ZBmH5k/Dt0YXkMa0ZVh9AxVLQhQyuNejFtnVoy+qV59dx6m0MdY",
	"8BiFYqnLvg1zH59j/g1GJm2BLYGys+F+e+A0YQKb4D1fxFqiuPNXJktouKDMfw/41y8wUIW+58mHKKXf",
	"tgvzo1IJFrVXIi82FsUodbJIKMvUOweMktAA1z472D8EFw5qh7Vne3Vw4enJ0fEXB3v1TKwSUvfkfoRR",
	"8ysUrNV7yptYx9MEpVrlhaHPuvcrkG5rGFzWjvajt8ZzIfal/JaL5qbBMicK82Pt6CQu5RHwZtZYFils",
	"ozAHyxm2mJDq0A+xcLXrr1l8++SWwTLQGSA3TaEo9bQ8VqX/LmYCZc2q0eIi9FWa+SePwS0QQi1g1hNO",
	"t7kZ+IbtJCxqcXP6jY7yB030gMY01RcOjWhsup8e0JRe00j/SFOaGjJMdU1I01ycIxRnLDDJn6GQKUx1",
	"p7qza0jyGCM/ZuDBo53qziOrkOrYfCt+ojqVZQdqoyrg80uOwlQP9CVN9NChW5rRtX5Fr2lGYxrpIU3o",
	"Wv/s0NjRF4a+ffMvTcCyELYR7zfBsyWfqE5t0Y9iX/ghKhQSvOfnwEzc0wRFD1yI7BcDiUQBbqZ93/mT",
	"JKwJq7XecPPj9ONqtaxr3u0r6/suPN7k9JvzzAWZhKEveqsyWieNViUimoT8tpEDTkzmDYOW+jVv3nff",
	"cLFrv9FfdGMxr2lCNzRNp+eMruzjqMyTehb9PXImf3HZhiEbKFRmgcyNBttIuCx0QQ/pVg9MGdNUD/Ur",
	"h65oRv84NLZVPtXf05SuMoWdN+VLLq0r+VkEaX9BqT7lzd7WLj3FA6+fb2dKJNgvNjCfu77UF3RLE/3S",
	"qOzQLCOFFXwuxYotpZLd0MjWi/5JD/XlOnvshF1jywO0tDun0tgP5FDu6rCRM7vvorS21uukvaOscfJ3",
	"mtDfqTG2nLbs5En8gE4uL1/vr5N5ff+HkwYOxdligOTt+5wHftdJ18GFRHTBg45SsVepdM1ah0vlPak+",
	"2a1Av9H/LwAA//+ISO8ALw8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

