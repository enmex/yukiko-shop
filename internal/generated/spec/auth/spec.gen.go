// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTW/bNhj+KwK3oxY5azEUunXDDgWGYWiXXQofNOm1zc4mWZLqFhQGHGcfPRRYsR8w",
	"bKddDW9ChWRR/sLLfzSQdGrJlhVnSIBeDJsfz/u8z0M+9EuS8ongDJhWJH5JJCjBmQL342GuR49XA/Z3",
	"ypkGpu3XRIgxTRNNOYueKc7smEpHMEnstw8lDEhMPojW4JGfVVEDdDqdhiQDlUoqLBaJCf5mTrAIzE9Y",
	"mRlW5hVWZBqSz6Xk8tbJNFHb2Pxl5lh9ZD8CvLC85rjAM2JXrkDalBKSC5Caeh2TXI+uY3KkQH7NvwNm",
	"mxWSD+gY9tnjmEh4nlMJGYmf+mJriH5I9LEAEhP+7TNIdauWTboTUCoZuonVVqUlZcOtUlcL22o8AZZ9",
	"A5IOjj/jGTyG5zkovV0LJgkdX1/JL+tbXDpkj9iN8UIiEqW+5zLbt1htR2t/dMiOxE4eKc/qAlKmYWjN",
	"CjsYDqhU+stkAq2z46Rj8ubNrYvVoGtAoW+hrXV/TLel/0FQCeqhU2PA5STRvvNP7pOwRQh9BdNN2C8L",
	"a/D2GLijfwP3u7WlWYNzntNsTfnWLXDg+/pw1ewO0ZM0BaWuC4p3wSJhIEGN9ly/mSy+1hql7wKTsgG3",
	"gBvB+ScWZoZLLM1JgAtc2gg1MyzxLS7Mz1hiaSWm2sacy8/gCcgXNLXdvwCpPEzvoHdwaJlzASwRlMTk",
	"3kHv4J6TSI9c55GNvEg1Ascpxf3N3CD2u5njpZlZTliauXkd4BlW+E+AS0e5ND9iiWc1llZw97o8ykhM",
	"vuJKW77NhCNeK1D6U54d39oD1R6j06Y1WubgBmpv98e93nbv5tSc4CUW5hVe2AetqklxjgVerKTwz1s+",
	"mSTyuFuyC1wEeImV+cXMzal1NBkqe1jcBe1bnJU9Lrc7bHnTOCKlmZlTLMzcoeO5eY1vscIlLswcCzw3",
	"vwa4DMyJPV5u5F8sdjvla9+RQ40HaS9nDndhvlu38S8pJPe9nd2bNv/NNDx8s30FrYg71L3GySPR4eQf",
	"WODf3hh3nW7ZySNxh06un/T318mmvv/DSQsH0oYsiZ9u2vcFT5Nx4OdJSHI5JjEZaS3iKBrbuRFXOn7Q",
	"e3AYkWl/+l8AAAD//ygx2oVBDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

