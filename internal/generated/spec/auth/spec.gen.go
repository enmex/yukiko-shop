// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVzW4jRRB+lVHBccg47Aqt5maWCEUiASUxl1UOw7hs9+Lpnu1uL0QrS47Dzx5WYsUD",
	"IDhxtQzWWglxXqH6jVD1JNhjj50sykp7sTzd1V999X3V1S8gVVmuJEprIH4BGk2upEH/Ue/ZzsH1An+n",
	"SlqUlv8med4VaWKFktFToySvmbSDWcL/PtTYghg+iObgUbFrohJov98PoYkm1SJnLIiBfnWnNAncjzRz",
	"A5q5lzSDfgg7Wit972TKqFVs/nRDmn3EPwFdMq8hjegcOPIapEqpXKsctRWFjkmaojG3cTlS36LkUovw",
	"o5PcQ6HsZRA/gfpne7v7EMJefb/++c4BhPC4cXj05d7OARyHYH00GKuFbDOIxpZG07ljUn/gWU9obHKu",
	"a8JzlBKpeTr1zVNMbaU9ZQUyNCZp+40lpkuZbwKrchyibH6NWrROHqsmHuCzHhq7mguzRHRvz1SEHTOu",
	"aMtd+dZ4IeSJMd8p3bxrsoUTlfWJtmzka3mkqrkooJAW26j54HqGLaGN3U8yrNztJhs23764ebIF6AWg",
	"sCihqvSiDVel/z4XGk3dq9FSOktsUfknDyGsEMLewGwmXISFC/DH/uoL2VJ8emkE/EETN6AxTd1pQCMa",
	"8zBwA5rSGxq5n2hKUyYjbJdT8iQIDlE/FykX/xy1KWBqW7WtbSapcpRJLiCGB1u1rQdeIdvx9UZJz3Yi",
	"U+pzr4oqGmKJ2G9uSFduwJxo6obuVUDnNKO/Axp7ylP3A03pfIEli+vn5G4TYvhKGct8yxcLCrHQ2E9V",
	"8+TeRm317e2XvbG6h35h4RX6uFZbrd2duVO6ool7SZc8mmcLUlzQhC6vpSgGdS/LEn2yWbJLGgV0RTP3",
	"sxu6M3Y0aRvuloZBzQ0S3tjjx8UGW16XWmTqBu6MJm7o0enCvaI3NKMxjdyQJnThfgloHLhTbi+/8g9N",
	"1jtV5H5HDpXm4J2c2V6H+V/c0nsfwsPCzs2Hlt/lkoevV68gi7hG3VucbOQbnPydJvRXYYy/TvfsZCN/",
	"h07OX5L318myvv/DSYZDzUMW4ifL9n2h0qQbFPsQQk93IYaOtXkcRV3e6yhj40e1R9sR9I/7/wYAAP//",
	"uqJdXwsLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
