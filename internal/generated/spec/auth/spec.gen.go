// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xW3W7iRhR+FWvaSzeQ7qpa+Y6A07WEzNaBqO0KIdcMMFvs8c6Mt41WSIT0Zy9W6qoP",
	"ULVXvUW0aFHSkFc480bVjNmAiSGkSqTeIDxn5pvvfN/MOfMaBTSMaYQjwZH1GjHMYxpxrD9Kieh5iwH1",
	"HdBI4Eiov34c90ngC0KjwgtOIzXGgx4OffXvY4Y7yEIfFZbghTTKCxnQwWBgojbmASOxwkIWgl/lKUwN",
	"+SPM5RDm8g3M0cBENmOU3TuZLGoemz/lCOafqB8DLhWvEYzhHKmZC5A8pWJGY8wESXX0E9G7jUmDY1an",
	"3+JIJRsz2iF9vMsazYThlwlhuI2s5+lmS4imicRJjJGF6DcvcCBytczSxSpcpm0dwlESKtiDUqXl2V80",
	"7KM6MtFxqepUSnWn5rYOS07VriATNdxSo/605jlf68/DmnfgVCq2i0zk1uqtw1rDVePlmntYdcp1PaVa",
	"cdzPWxX7Wf1py/6ybNsVvbb8VbnqlFuLODKR49Ztzy1VW0e2d2x7Ldvzat5KblwwEnVVbiHm3O9q6mux",
	"NZ2WWS4X5Yl1hKP2MWakc6Ime/hlgrnIES30SX+HXfW0psIl3ciJ7oxnotjn/DvK2rtutrIiNz/SjRrx",
	"Rh7B4hws1pFI4K46deYWhh3CuHD9EOdG+/6W4N2TW262Ar0CZKYp5KWe3reb0n8fE4Z5SavRoSz0RZr5",
	"Z4+RmSOE+ACznXA6zVyBV8dA3+E7uL9dW9LOcE4S0kbmg1mgwXf14UOyG0T3gwBzflvFu66QDHcY5r0d",
	"56+XyHSvJUpTV34SdagCXOsAf8BUDmECM3lqwBgmqhfIIczgPYzlTzCDmZKYCFWvdSMwjjB7RQKV/SvM",
	"eApT3Cvu7SvmNMaRHxNkoUd7xb1HWiLR05kXVO0u8EzB0UrR9GauEftNjuBKDhUnmMmRfGvAOczhbwMm",
	"mvJM/gAzOF9hqQTXbdJpIws9o1wovtkKh1KtMBcHtH1yb502v4wOstYIlmA9sPII+bRYvJm7PJOncAVT",
	"+QYuVWeer0hxAVO4XEiR9ukkDH12sl2ySxgbcAVz+bMcyTPlqN/l6rDoC9pUOAt7dN3eYsu7zBGZyaE8",
	"g6kcaXS4kG/hPcxhAmM5gilcyF8MmBjyVB0vPfIPTDc7le79QA5lGtJOzuxvwryet/bcM9Hj1M7ti9af",
	"ZRkP3928gkrEDere4mQj3uLk7zCFv1Jj9HW6Zycb8QM6uWzp/18ns/r+BycVHGaqyCLr+bp9VRr4fSON",
	"IxMlrI8s1BMitgqFvor1KBfWk+KT/QIaNAf/BgAA//8lhuXtCg0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

