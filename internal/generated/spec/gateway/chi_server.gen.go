// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Отправить код на почту
	// (POST /auth/sendVerifyCode)
	PostAuthSendVerifyCode(w http.ResponseWriter, r *http.Request)
	// Авторизация пользователя
	// (POST /auth/signIn)
	PostAuthSignIn(w http.ResponseWriter, r *http.Request)
	// Регистрация пользователя
	// (POST /auth/signUp)
	PostAuthSignUp(w http.ResponseWriter, r *http.Request)
	// Добавить новую категорию
	// (POST /categories)
	PostCategories(w http.ResponseWriter, r *http.Request)
	// Получить список товаров
	// (GET /products)
	GetProducts(w http.ResponseWriter, r *http.Request, params GetProductsParams)
	// Добавление товара
	// (POST /products)
	PostProducts(w http.ResponseWriter, r *http.Request)
	// Удаление товара
	// (DELETE /products/{productID})
	DeleteProductsProductID(w http.ResponseWriter, r *http.Request, productID ProductID)
	// Получение информации о товаре
	// (GET /products/{productID})
	GetProductsProductID(w http.ResponseWriter, r *http.Request, productID ProductID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// PostAuthSendVerifyCode operation middleware
func (siw *ServerInterfaceWrapper) PostAuthSendVerifyCode(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthSendVerifyCode(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostAuthSignIn operation middleware
func (siw *ServerInterfaceWrapper) PostAuthSignIn(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthSignIn(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostAuthSignUp operation middleware
func (siw *ServerInterfaceWrapper) PostAuthSignUp(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthSignUp(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostCategories operation middleware
func (siw *ServerInterfaceWrapper) PostCategories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCategories(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProducts operation middleware
func (siw *ServerInterfaceWrapper) GetProducts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductsParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProducts(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostProducts operation middleware
func (siw *ServerInterfaceWrapper) PostProducts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"ADMIN", "MANAGER"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProducts(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteProductsProductID operation middleware
func (siw *ServerInterfaceWrapper) DeleteProductsProductID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "productID" -------------
	var productID ProductID

	err = runtime.BindStyledParameter("simple", false, "productID", chi.URLParam(r, "productID"), &productID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"ADMIN", "MANAGER"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProductsProductID(w, r, productID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProductsProductID operation middleware
func (siw *ServerInterfaceWrapper) GetProductsProductID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "productID" -------------
	var productID ProductID

	err = runtime.BindStyledParameter("simple", false, "productID", chi.URLParam(r, "productID"), &productID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProductsProductID(w, r, productID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/sendVerifyCode", wrapper.PostAuthSendVerifyCode)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/signIn", wrapper.PostAuthSignIn)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/signUp", wrapper.PostAuthSignUp)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/categories", wrapper.PostCategories)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/products", wrapper.GetProducts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/products", wrapper.PostProducts)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/products/{productID}", wrapper.DeleteProductsProductID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/products/{productID}", wrapper.GetProductsProductID)
	})

	return r
}
