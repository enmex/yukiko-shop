// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWzY4bRRB+lVHBcdhxSISiuS2Iw0oIRYHlEvnQzJTtDvZ0p7uHYEWWdr385BAE4gEQ",
	"N67GxIq1y3pfofqNUHd7Y493POtFjsTF8nRXf1X1fT1fzQvIxECKAgujIX0BCrUUhUb/cFia3uPlgnvO",
	"RGGwMO4vk7LPM2a4KJKnWhRuTWc9HDD3732FHUjhvWQFnoRdnVRAR6NRDDnqTHHpsCAF+s2e0iyyP9DC",
	"ntDCvqQFjGL4VCmh9l5MFbWumj/tmBYfuJ+ILl1dY5rQObjIJUgdU1IJicrwwCMrTe+2So41qi/FN1i4",
	"ZqUSHd7HXc74ShQ+K7nCHNInIdkKoh2DGUqEFMTXTzEztVxWyx2g1qzrN5ZHtVG86N5IdR1Yl+MLLPKv",
	"UPHO8BOR42N8VqI2N3PhgPH+7ZlCWNvh8m5xVNwZLwbJtH4uVL5rsrUTtf3xbnEst9aRiXydQF4Y7Dqx",
	"4oYKO1xp8zkbYO1unzVs3r25VbI16DWgOLRQ13q4pjep/05yhfrQs9ERasBM6PyjBxDXEGGuYZoLDmHx",
	"Gry7Bv7q30H9Zm55Xqm5LHm+KnnvEnjwXXW4bnYL6SzLUOvbjOKtsSjsKNS9HeM3nSXkWqG0vWHyoiMc",
	"YNU4Dx8dRV1m8DkbRvSX/ZnOaUaX9JomjllunLutB0EM36LS4XDroHVwz9UrJBZMckjh/kHr4L4nxvR8",
	"v4kzukRXbMbzI8L7uOHjv9sxXdkTmtCU5nZsX0V0Tgt6HdGUZvaE5vZ7mtM5TeyPNKc5+NzKz5SjHFJ4",
	"JLRxLl/1NQgMoTYfi3y4t7FUb56jqiBGlegX1ib2h63Wzd7tmT2lK5rZl3TpxthijYoLp8qSijDUysGA",
	"qWEzZZc0ieiKFvYnO7ZnTlDW1e6K+Ney7XCW8ni3bpDlV5q62eoEoDc0tyf2jGZ27NHpwr6iN7SgKU3s",
	"mGZ0YX+JaBrZU5rbU7/yD822KxVyvyOFKmNoJ2XubcN8G7fxbRTDgyBn86HNb5iKhlV+/eV2JG5h9xYl",
	"j2WDkn/QjP4OwvjXac9KHst3qORqkP9/lazy+x+UdHConMlC+mRTvs9ExvpR2IcYStWHFHrGyDRJ+m6v",
	"J7RJH7YethIYtUf/BgAA///3ULBUNwwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

