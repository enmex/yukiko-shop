// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xW324axxd+ldX5/S63hjRRFe0dhnWzElrcNVhtIwttlwE2hZ3NzGxTFCHZuH9ykapV",
	"H6DqXW8pDQqya/wKZ96omlkSWLJgXNlSbxA758x3zvm+mXPmJQS0H9OIRIKD9RIY4TGNONEfpUR0vcWC",
	"+g5oJEgk1F8/jnth4IuQRoVnnEZqjQdd0vfVv/8z0gYL/ldYghdSKy9kQIfDoQktwgMWxgoLLMBf5RlO",
	"Dfk9zuUpzuUrnMPQBJsxyu48mSxqXjZ/yBHOP1I/Bl6pvEY4xgtQnguQPKZiRmPCRJjy6Ceie1MmDU5Y",
	"nX5NIlVszGg77JFd9uhMGHmehIy0wHqaBltCnJggBjEBC+hXz0ggcrnMpkuUuUxb2kSipK9g90uVpmd/",
	"1rCP6mDCcanqVEp1p+Y2D0pO1a6ACQ231Kg/qXnOl/rzoObtO5WK7YIJbq3ePKg1XLVerrkHVadc1y7V",
	"iuN+2qzYh/UnTfvzsm1X9N7yF+WqU24u7GCC49Ztzy1Vm0e2d2x7Tdvzat5KbVywMOqo2vqEc7+jU1+z",
	"rfG0rHK5KY+sIxK1jgkL2wPl7JHnCeEih7S+H/Z2iKrdThRu2Imc6NZ4JsQ+5y8oa+0abGVHbn1hJ2rE",
	"G/MIFudgsS+MBOmoU2duybAdMi5cv09yrT1/i/H2xS2DrUCvAJlpCXmlp/ftQ+q/jUNGeEmz0aas74u0",
	"8k8egZlDhHgHsz3h1M1cgVfHQN/hW6i/nduwlck5ScIWmPcmgQbfVYd3xW4g3Q8CwvlNHe99h2SkzQjv",
	"7ui/3iLTWEuUE935w6hNFWB2ApQOHaPjC/LCHxj4p/wJL3CKV/gGx4rZUKg2veoEJnxDGE83F/eKew9U",
	"vjQmkR+HYMHDveLeQ02M6Op6C6pjF3imzWh+aHof1wbSb3KE1/IUxzjBmRzJ1wZe4BzfGDjBqTzFmfwO",
	"Z3iBY/kDznAGOjbTw9FpgQWHlAs1rrJ9DVKGCBf7tDW4s/ma3zyHWUEES4heWHl6fFwsfli7PJdneI1T",
	"+Qqv1Dyer1BxqVRZUJFO56Tf99lgO2VXODbwGufyRzmS50pQv8PVEdHX8kThLOTR3XqLLL/gRD0SlAD4",
	"FmfyVJ7jVI40Ol7K1/gW5zjBsRzhFC/lzwZODHmGM3mmV/7G6Wal0tj3pFBmDO2kzINNmO/91h55JjxK",
	"5dy+af0xltEwy68+3IrEDezeoGQj3qLk7zjFv1Jh9HW6YyUb8T0quRzk/10ls/z+CyUVHGGqyYL1dF2+",
	"Kg38npHawYSE9cCCrhCxVSj0lK1LubAeFx8XCzA8Gf4TAAD///HU+8MADQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

