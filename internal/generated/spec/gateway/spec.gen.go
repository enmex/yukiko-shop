// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYT2/bthv+KgZ/v6MWu2sxFL5l7TAEGIZgW3YJcmAk2mZnkSpJtQ0CA2nSrT10WDHs",
	"vA3oYVc3rVEjbdyv8PIbDS8lxZJN20rmYAO2i2GJ5PvneV6+4sNDEso4kYIJo0n7kCRU0ZgZprInJaM0",
	"NFt38YEL0iYJNT0SEEFjhk8X4wFR7H7KFYtI26iUBUSHPRZTXNiRKqaGtEma8ogExBwkuFgbxUWXDAYD",
	"XKwTKTRzXjdT0/sqf4HPoRSGCYN/aZL0eUgNl6J5T0uB76aO/q9Yh7TJ/5rTnJrZqG5WjDqfEdOh4gna",
	"Im0CP9vHMGrY72Fij2Bin8GEDAJyRzFq2HaW59qD8lv3RferPYZTGNnjBoZpj9zDEQwbcA5DfDeBt/AG",
	"hnAOY0zjGCZwCkOcgml8ppRUaw+/atUX9h8YyEf4g4G6uIZwhhF9zsx1oeox7YvtpX0MH2Bkn8E5TGDU",
	"gA8wgXf2xD6FUQ4jjOHcPnEV8R6G9gcYw7gBkzK8I4Kmc9e+6k2UTJgyPKttmpreqvh3NFPfyO+YQJwS",
	"JTu8z+qsIdlOKrbhbuZsamLvYuvJ/XssNK6+qWFdqQ7mIw17vB8pJvIZ+VtuWKxXlnVhdHDhkSpF3XPW",
	"OQ4Je0TjBPMi8MKh/R7L4wmM4bU9sUdwBuP5VhFgf2LClKOuG0jeq+pnkdfQfBIzKLuMvNhWd/f9lGnj",
	"wTmP8cscmLmUK2XrGReLFrpe7R1QPGSVzhzJdL/PpoCLNN73FJRzVY0oKD4JmdGgmk8NWBbtlL+MC49q",
	"fHyWwdeTRu6o/nohdEH4cSz8XQLLub5exTBmWtOuL72ZqIqJPh/+Tv0fWZcmq2go/0b0SnjNAFkXva+Z",
	"iL5lincO7siILWynLKa8v7rgs2l7aJd3xZa4tD3se1o/lCqq66y0wpsf74qdZPFnQkZl7rgwrIuYB0si",
	"7HClzcKi6tMlg5dPbuqsZLpkKMhS8KWeHXbmoX+UcMX0pqkUHxfmk1vT2isBYQozywPOpgUl81gG7gB1",
	"CfaXY1tzQ66JAme8Lg9FsgtAp2HI9Mqz0cXxVLGOYrpXc/7s+TTzNbWy587pXHQkGqye1ze3txpdathD",
	"etCAV/ZHOHPH9DcwRGS5cWfJ0iQSkAdM6Wxxa6O1cQPjlQkTNOGkTW5utDZu5scXl28Tj8tNXWkzDh+Z",
	"7UePIvuA+gpOYWyP7fMGnMEE3jRyaTZ2h9mzQjYQ51s5PbMVkTbZltqgVqj2tVxIM20+ldHB2iSRv3kO",
	"qoSgbp/V4h+3WvO525OydGrApATFO2QlhyKTRmkcUzyqL4MMRSzqL/vUHtsTJJR2NZaI25Z7aCenx3Xr",
	"JbS8gFNUZ0gAvIWxPbInTjbn6u45vM2l2zGM4J39qQGnKJ/H9rF78x5Gi5nKfF8TQ5XPUC1mbiyyeTFv",
	"5tYjILcyOpcvmpX1FQ6r+LriRhAXoLuCyZ1kCZO/wwheZ8S47bRmJneSa2Ry+iH/5zJZxfdqTJZF9QIa",
	"f4EJvJq2hvnrKR9J24Xd66HIq8zXxdSCS72rU8bCVHFzQNq7h2SfUcXUprtF2iU0ijk2pJgK2nWk7FUo",
	"roF9QWohTqq8Ng8vrngHGbd9ZpiH5Zfu8rEmw3edlYLj7dIlcvn6edcP1XRKc3r9jHnPMHXLF2X5u/X3",
	"ULICqHk6AtJlvn3129VuK2e5mKr76yKiBsK+G9t1tLgrY+TZFY529aBApMrGFzKk/UY2TgKSopQmPWOS",
	"drPZx7Ge1KZ9u3W71SSDvcGfAQAA//+c8JFJdhkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

