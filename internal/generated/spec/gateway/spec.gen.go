// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYz2/bthf/VwR+v0ctctceCt8ypygCrEGQIbsUPjAWbbOQRIWiWhiBgcTp1h667gd2",
	"2mEbsMOurhejXlI7/8LjfzSQkmLJoh3biNehlzYWyff4Pp/3eY/kCWowP2QBCUSEqicoxBz7RBCufzWw",
	"IC3GO3vYJ+o3DVAVhVi0kY0C/a04xUacHMeUExdVBY+JjaJGm/hYrRWdUM2PBKdBC3W7Ngo5c+OG2N2Z",
	"Y3o6vshuk3EfC1RFcUxdZJf8dNXiKGRBRHRMjzhn/CD9ooNkgSCBUH/iMPRoAwvKAudZxAL1berp/5w0",
	"URX9z5lC5iSjkVO0qr26JGpwGipjqIrgT9mDyWfqHwvGMLRkD/pwqYFIjSgfNU6wILUU1ANyHJNIby3k",
	"LCRc0CSIICVkJlhb8ZfGUh5qM8EOuWcmYwrw08R6/QZKdvSMNIQykexuP+Fl7uZms6a0kwIyhvEF0Ym2",
	"eYDTBilkg8viI49M8yGI/SPCzaEWd2RnaZgYtYvxmGAppVQRD59EEW6R23HPJpp8fEUC92vCabNTYy6Z",
	"iz3xMV2C4WRaXdmlrWA3WNmeAimKXjDuLusst8IYH20Fh+H8nGJuHkAaCNJSdNoLdtikPBJzk9DDCwZX",
	"D27qLGc6Z8hOQiiHrgzSoMmUq2LJ2N7ftVpYkBe4Y8E7+R1cwhDGcAF9ldZUeKQ4CdnoOeFRsriyVdm6",
	"p0JhIQlwSFEV3d+qbN1P01uD6uBYtJ2okFkaepZQMFPBfpU9uJan0IcBjGRPvrHgEiZwYcEAhvIURvIl",
	"jOAS+vJbGMEIad9cV9NdF1XRPovEdizaxVROizuJxBfM7dxZQTbrpVukT/WS2f7weaVSjl2eyzO4hqF8",
	"DWNVwCc5KK4UKykUSTmPfR/zzmLIxtC34Bom8pXsyXNFKG5FKqEOI8JRXdlJ6dECXUDLDzBQXUURAO9h",
	"JE/lOQxlT1uHK/kG3sMEBtCXPRjClfzegoElz2Akz/SXDzCcz1Tie0MMFSrPUszcM4Q/kGfyR0t+oxGY",
	"yNcwUVn/IGHR5P/GZqlpF6grwqpzWmE3B9RbCDwMFxD4Owzhr4QPraI7JvAw3CCB05K9NoE/bYjAIqzr",
	"EZi2/rQJtYiJvt+0wXP5KlW4rhQjeQYTuLR0OezpnSSp9HeJq8dE1KZu7MIR/Gl6MD6OCe9MT8Y+pkqV",
	"pcP1EWMewYFCwrzQI7i5eGF9mXKoOFNH2DvnbHUsM9KyI7M+1MwR2s8wgXf5WjxWOSDP5duSbfnWqKkC",
	"UZvQlPn8/x/RFmnEnIqOTssjgjnhqsYo9Ld3nuzuIRs92d7bfvzoANVVHuV4XRX5jNX0qlFSo9NoU8/l",
	"JHBO8qfz7roqVUXhYlWt1tI91IpX4Bn9mlCeTnEKl4sl1beplrcuRgYNztC1Lkvwy62yLFLyqVKxUCUz",
	"uKfvJuu2LHXq0Z3xVP1vwns/c7BUs/KoT4Wp6dxc4pZvOv9+2pfQKJemJfqNviPAKHn2yez1jS0mB+7m",
	"GszME84n1F/mIm1uKZlWnJOb18ZuEqdHBDFE/Ie6fy/L5462kjG6n3vPXK0yTV9CDVJ5YNpl/rr6cSi5",
	"BSiTjG4rVpkpGMFYvtQ59yF7bbBgkncxXFS3NkTEx6lZK4JikIHmmT/PIChG8CVrYM9KxpGNYu6hKmoL",
	"EVYdx1NjbRaJ6sPKw4qDuvXuPwEAAP//xnyIJVAYAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

