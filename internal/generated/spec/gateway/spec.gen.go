// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYz2/bthf/VwR+v0ctctceCt8ytygCrEWQIbsUPjAWbbOQRIWiWhiBgcTp1h667gd2",
	"2mEbsMOurhejXlI7/8LjfzSQkmLJon8iXode2lgk3+P7fN7nPZInqMH8kAUkEBGqnqAQc+wTQbj+1cCC",
	"tBjvPME+Ub9pgKooxKKNbBTob8UpNuLkOKacuKgqeExsFDXaxMdqreiEan4kOA1aqNu1UciZGzfE3oM5",
	"pqfji+w2GfexQFUUx9RFdslPVy2OQhZERMf0kHPGD9IvOkgWCBII9ScOQ482sKAscJ5FLFDfpp7+z0kT",
	"VdH/nClkTjIaOUWr2qtLoganoTKGqgj+lD2YfKb+sWAMQ0v2oA+XGojUiPJR4wQLUktBPSDHMYn01kLO",
	"QsIFTYIIUkJmgrUVf2ksZbynGD5NDNRv0GJHz0hDKAPJBvYT6Of6n02M0j4KwRvGFwQg2uYBThukQLjL",
	"4iOPTCkPYv+IcHOoxR3ZWaYlRu1iPCZYSllTxMMnUYRbZDnu2USTj69I4H5NOG12aswlc7EnPqbeck/J",
	"tLqyS1vBXrC2PQVSFL1g3F3VWW6FMT7aCg7D+TnF3DyANBCkpei0F+ywSXkk5iahhxcMrh/c1FnOdM6Q",
	"nYRQDl0ZpEGTKVfFqrC7v2e1sCAvcMeCd/I7uIQhjOEC+iqtqfBIcRKy0XPCo2RxZaeyc0eFwkIS4JCi",
	"Krq7U9m5m6a3BtXBsWg7USGzNPQsoWCmSP0qe3AtT6EPAxjJnnxjwSVM4MKCAQzlKYzkSxjBJfTltzCC",
	"EdK+uS6Yey6qon0Wid1YtIupnNZvEokvmNu5tZpr1ku3SJ9qF7Mt4PNKpRy7PJdncA1D+RrGqkZPclBc",
	"KVZSKJKKHfs+5p3FkI2hb8E1TOQr2ZPnilDcilRCHUaEo7qyk9KjBbqAlh9goBqHIgDew0ieynMYyp62",
	"DlfyDbyHCQygL3swhCv5vQUDS57BSJ7pLx9gOJ+pxPeWGCpUnpWYuWMIfyDP5I+W/EYjMJGvYaKy/l7C",
	"osn/jc1SXy5QV4RV57TCbg6oSwg8DBcQ+DsM4a+ED62iWybwMNwigdOSvTGBP22JwCKsmxGYtv60CbWI",
	"ib7ftMFz+SpVuK4UI3kGE7i0dDns6Z0kqfR3iatHRNSmbuzCKftpevY9jgnvTA+/PqZKlaXz8xFjHsGB",
	"QsK80CO4uXhhfZVyqDhTp9Rb52x9LDPSslOxPtTMEdrPMIF3+Vo8Vjkgz+Xbkm351qipAlHb0JT5iP8f",
	"0RZpxJyKjk7LI4I54arGKPR3Hzzee4Js9Hj3ye6jhweorvIox+u6yGespleNkhqdRpt6LieBc5I/nXc3",
	"VakqChfrarWW7qFWvOXO6NeE8nSKU7hcrKi+bbW8TTEyaHCGrk1Zgl+WyrJIyadKxUKVzOCePo1s2rLU",
	"qUd3xlP1vwnv/czBSs3Koz4VpqZzc4lbven8+2lfQqNcmlboN/qOAKPkZSez1ze2mBy422swM084n1B/",
	"mYu0uaVkWnFObh4Uu0mcHhHEEPEf6v69Kp8PtJWM0f3ck+V6lWn62GmQyj3TLvPX1Y9DyRKgTDJaVqwy",
	"UzCCsXypc+5D9tpgwSTvYriobm2JiI9Ts9YExSADzTN/nkFQjOBL1sCelYwjG8XcQ1XUFiKsOo6nxtos",
	"EtX7lfsVB3Xr3X8CAAD//08KXKgzGAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

