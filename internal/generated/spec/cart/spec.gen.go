// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWwW7bRhD9FWHaI2sqjQ8Bb21TFAF6MJrmFPiwJtfSBiJ3vTs0IBgEHAdFCvRW9Nyi",
	"p14VAUING9Y3DP+omKUkkhIVK6maJhdb5C5n3rw3+2YvINap0ZnM0EF0AUZYkUqUtnqyOsljfPKYH1QG",
	"ERiBQwggE6nkp9V6AFae5crKBCK0uQzAxUOZCv7wVNtUIESQ5yqBAHBs+GOHVmUDKIqCP3ZGZ076rN9a",
	"q+0Pizf8ItYZygz5pzBmpGKBSmfhC6czfldn+tzKU4jgs7AuKqxWXdiO6rMm0sVWGQ4GEdBf5RXNv+A/",
	"PbqjWa+8ogndQBHAdxK/ERb3jmk97rugKpYUe86+SpKjSowfdRXyLJcOFyIaaVFV5FbKXayLEIAZatTP",
	"7Kh70apYtrRMdH4ykrWaWZ6eSFvtbTTNfdo3++Z5BS5otdUK1hLE8SqIPnkhY+SUGx3TrjmVzolBV9lr",
	"+Zcbu3J09EA7ywK1/61Qpu4+9ReCcfBFNmGtGPtnjWJ0tDPpa2WskLQCdRW1hLBRTJw71Km0O6kYgEp2",
	"2vZxNV8AZ7nIUOG4kVZlKAcdnPoAzcZsMBTUjctIG3EblR0XATwziUDJbbQgfusxfQdkq62bAvNWlZ1q",
	"jrJmK3/SrLykKV2XL3t0Q/Pykv6ma7orf2GHmdOUJuUl/2feFI447NOhNkZlgx5X0Hsq7XlV7rm0rgrb",
	"P+gfPGBmtZGZMAoieHjQP3jIRAgc+tLCWFisEI0kyg5sv5evGVd5RTc0WUMHPrb1bvskgQge+yiMyCep",
	"x9fzxcg6y6Ud1zMrd9L+q3F1vDauvuwfdtTwa/mSzfonj31e/kxzpuWw39/mCquYG5MqAJenqbDjHbhB",
	"MeDS21L53htI7ID5B83ptnxVvqYZ3dE1ze6je2GD/xvXO/C3MVX3wfsORG3n3mjXRf5vNKc3NKEp3a6i",
	"Ng7fpEfTdpZXG3IcaffB9fCW9bVOxnu7B227vRRtr2O0xUZHPPiAp++9FNvWF0VQeWF4sZorxVt9cQ/9",
	"UrvlUfOS1W6dLoLqLWE9BYvgo/PY/1AvP8PiYdfAojd056PetuyBbumaHcP79ZQmb81Ns83Tzfk+DbH2",
	"bwpbL0s7uUL/vfplf0JuPfScUNrzpXxtiN/rWIx61ToEkPONGIaIJgrDEa8NtcPoUf/RYQjFcfFPAAAA",
	"//+Wl+2Kvg8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

