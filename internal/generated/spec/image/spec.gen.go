// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RUvW7UQBB+FWugdM4OSRG5RKE4iQKBUkVXbOzN3Ub27rI7jhRFlpIAEgUNaaipaCNQ",
	"lCgS9wy7b4RmfXHuHMMVINGcfDt/33zfzJxCriqtJJdoITsFzQyrOHIT/omKTfl4N3xKyEAznEEMklUc",
	"ss4ag+Fva2F4ARmamsdg8xmvGIUdKlMxhAzqWhQQA55oCrVohJxC0zQUbLWSloeKL4xR5vXihR5yJZFL",
	"pE+mdSlyhkLJ5MgqSW8PlZ4afggZPEkeGkpaq01Ws4aqBbe5EZqSQQbum79w8w36idxPdx35C3fl7qCJ",
	"YU+XihVj6vWf4xrKPYTu0p/7z5GbE6Lmnt5hvrRRmhsULZ0Vt5ZNg6HP/LJq+53jpJNIHRzxHP/AwGol",
	"UazIvSjzSPAY9Eyh2jPlekxhYDr3x8jIX8hDRZl6hH111/7MfXe3/jxyN+7K/fBn/p27cXfuNvLv3ZyU",
	"JnQCS0oZmovecHMscg4xHHNj21TpKB1tEm6luWRaQAZbo3S0RdAYzkLvSdiEdn+UxQE8X5Yg3PoL/2kZ",
	"BNEYpmdcQAavlMVxm6+lg1t8roqT3tBVdYlCM4MJcb5RMGSrc9eTp1qMQafQgZDMnAys5CDPqxve39pn",
	"6ebvRr3zGx72GLbTdH1sf4FjsHVVEf515CKbWhqmUBcmFLqQKzldHLCmFazkyP9Out2QoxVv3B3H5ZO6",
	"P9zog0tyf1SbySOOtwfQXfpzulYf3Nyfubn/6Ob/g1OK5eb4vsVVjC9VzsqotUMMNa0+zBB1liQl2WbK",
	"YraT7mwl0EyaXwEAAP//92cZQJIGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

