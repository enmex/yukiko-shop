// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZTW/jRBj+K9HA0dTZj8PKR7oIrYSgYsWp6mGaTBOvbI87HldEkaV+LLAHtALEHSEO",
	"XEO7kUK79f6Fd/4RmvF3PE7itGZBWqmqmtjzzvM+zzvvx3SKBtT1qUc8HiBrinzMsEs4YerTAHMyomzy",
	"7Kn8ZHvIQj7mY2QgD7sEWeUXDMTIcWgzMkQWZyExUDAYExfLlUeUuZgjC4WhPUQG4hNfrg44s70RiiID",
	"+YwOwwFv3Kh4fpd9Irk48KkXEOXfZ4xR9nX6jXKYepx4XP6Jfd+xB5jb1DNfBNST3xU7fczIEbLQR2ZB",
	"n5k8DcyqVbXrkAQDZvvSGLIQ/CnOIf5E/urBLcx74hxmcI0iA31O+G7CqU2Ce0emt65D+BvEcCMuxA+w",
	"EOfix544g3ewEGcQw3UPrmEmzmEOVxCLU1jA31Xokw6BT1rBXkYqXqdI95J46gLosmkdzj8Un3PxCm4h",
	"hnkP3uXA53ALC/nVAm7FSwX7LczE97CARQ9iGSsxXMJMnMK86kzQoTero+X3UnCU8MVw2ZM/iQgzuIEY",
	"rnLUz8PDbkNdv0H7aJfavNHFfJTlHpVMsgBVaZRRnzBuJ2lmMLadISMKvc2JG6wDn5uK8hyGGcPqsz3c",
	"INNleXOKyLfY9R35DH5SkfVW5puXsIArcSFO4RoWuuU+ZqkEm+L0x5TTb5gj19TNpVG0MQNp2NUJiMr5",
	"fx8p53N+SxulDBzk6+nhC5IY3GUEc1Lkk+OQBLyuWkuiV1BYf9TMlc6/NZ7kCafBkaxIf9mEtHIaNM8T",
	"Jlp4vjoU7AGpMDuk4aFDCm690D0kbAUVVcSl/TLrRtVnHXW10l/lzCVBgEdkvUDZi7o9Gou5Vp8s7O6W",
	"IJbglWyvRlip2dhxvjpC1v7GIKbLpg8ay2wnsXmHU/o/iNWGEl9lsrMUmxtugNZYxzeK8hrndwnnzKUP",
	"YbZhbEmDtndE5ea1nm4uTuFStkFLPZ2EZXPVU6SE954TdpJseEJYkFjo7/R3Hkj3qE887NvIQo92+juP",
	"JDrMx0oXsxoVI8I1SNrOImpHpprGZ0NkVdOw2r2YcffTafM4JGxSjJuKpvJkSbzQlYwzSjkykEPwUYnO",
	"vDYcLA2YD/v9pmOYv9c0lRno8Sarl6dNAwWh62LZh25DHccjSUvRzcpM7tNAJ8yvEMNfMFNBoqYtOcxc",
	"igvxWjd4LcuyR4OqLixpYD6lw8m9jQH6Xi+qHiTOQhLVlHug8fgXcSZ+7onvlFOxeAXx/ejUlkmNSpFR",
	"Pk1m1hOb0+KOJtr2jDVNQCtP2m6KYLd8R7R09nSUFa+YpeulrY9WwxTY/elqJm29eu9PtPcrVv2S5z+o",
	"U7nT2kKYWjGtybFXDLEb1CrHdm1eKVZpVbI9Tkaqa9hWjvrlT+dy1FuNVISst9uoHt3k12glezNtCSqR",
	"3V0BWhrRt64/lXvD+y49jaTVJSgfA3OaX85HCWSHcKIDD2/UJeBG0jxVVjJx9krX/+2yUvGPA80pePzv",
	"ULzGcV2Er8srrW6JV6SYjohtlV66yi4tOdJEubRM2EnGSFWNL+gAO73kOTJQKIc7NObct0zTkc/GNODW",
	"k/6ThyaKDqJ/AgAA//+FzzVMahsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

