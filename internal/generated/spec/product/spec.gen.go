// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXzW7kRBB+lVHB0cSzP4eVj7AIrYTQCsRplUPHrsx4ZXd7u9sRUWQpya6AIwfOILQH",
	"rkNgxGh3x/sK5TdC3bZnbE+HeKPJCS5R2tVd/dVX1VXfnEEo0kxw5FpBcAYZkyxFjbJeSRHloX7y2Cxi",
	"DgFkTM/BA85SNKuN3QOJL/JYYgSBljl6oMI5pswcPBYyZRoCyPM4Ag/0aWYOKy1jPoOiKMxhlQmu0N76",
	"mUSm8Wnt++vGYgyh4Bq5Nv+yLEvikOlYcP+5Etx82974scRjCOAjfxucX1uV7/ZuUUSoQhlnxikEQL9U",
	"l3RFy+pyUl3Qsjq3i3NaTGhNC/OtpL/pL1rQmla0nFSXVNIVLcwWKDz4XEoh9w6/79UF+3cD5BPzxwC1",
	"uBb0xiD6AvVdsepw7cL2urqg97SsfqQ1lbSc0Hsq6W31svqBlg2NtKJ19YrK6pze0aL6nla0mlDZpXcJ",
	"xnVzta0YpnEm5GlTsxlKHde1FM7jJJLImx3N11hjqm4slNZpsSlZJiWz67r+zwC/Y2mWGBP9ZPG/M4S/",
	"ohX9Wb2szukNrXYL3jOvDLnuoh4LpHlx46NosrIbRNF9ss9cRDVhHm5OiqPnWLsaPKIXOSrtIL8B/lXD",
	"1g4Pvepw2Pl1B20bchpkHGKv6UQiP0pwmwWep0cod+K3V/UReW23q516/XhG0LJ9Y3vmJY5G9NV/o28u",
	"tPhWJvul0IJw89je9wFc7rTPPocpKsVmrvAGqNqNrjvcDfH/ZH1wstou819kr8PXgMhx7BnfMT8WBsdg",
	"XP7WyI5VddGdfyVdGYSxtpOn4X7yDcqT+sITlKr2MD2YHtwzkYoMOctiCODBwfTgQdPbbIr87kzJRN3I",
	"B0B+ppL+oAVd0dvNoO7pHXuDtMrhSWRACdU+LdWIQ1T6UxGd3pWQq2dQ0c+UkaJDeXl/eu8615t916lE",
	"Dx5OpzefHoo0D1SepsyM+lFcajZTpszaZ3VoXGzy5J9tdHdR5ypBjY6svbbqdGTGHlsvbc6edpR99zfB",
	"M3fo2y3+9jdBcbjD/EMXyq4m3A/FNwS+S68HM3TV/a+3k6dDbrdz5q6IHcGYS6Lvg+xbc+SocuMZ5UnL",
	"SD8bX4qQJZPaDh7kpqnDXOss8P3E2OZC6eDR9NF9H4rD4p8AAAD//wsoun/bDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

