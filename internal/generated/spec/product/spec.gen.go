// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZT2/bNhT/Kga3oxe5fw6FjkuHocCwBSt2CnJgbMZWIYkKRQUzDAH50209DMU27Lxh",
	"6GFXL6kxL2nUr/D4jQZS/yXKllJ73aFAUUSm+Pjj7/f43uPTDA2p41GXuNxH5gx5mGGHcMLU0xBzMqZs",
	"+iV2iHy2XGQiD/MJ6iNX/VZ+pY8YOQ4sRkbI5CwgfeQPJ8TBci6fevJ9nzPLHaMw7COP0VEw5E8eN5jO",
	"x1fZPaLMwRyZKAisEerX1gnlZN+jrk/UnnYZwZzsxba/TkbUZqnLicvln9jzbGuIuUVd45lPXflbvuLH",
	"jBwhE31k5NQZ8ahv6K0rFCPiD5nlSaPIRPCbOIdLWIjznjiDhThVD6cw78EtzOVvEfwNr2EOt7CERU+c",
	"QwSXMJevoLCPPmOMso3DL1vVwf5TAvlE/ieBKlxzuJaIPid8N3YGi/gbR6a3rkP4O0RwIy7ED7AU5+JH",
	"SeVbWCpCr3twDXNxDgu4gkicwhL+KUOfbhH4tBPsKlLxMkG6LdfVmNbhfKX4XIgXcAsRLHrwNgO+SHwV",
	"lnArnivYb2AuvoclLHsQFX14Ud6Mv8XdrPaWPwrOUcAXwWVP/otFmMMNRHCVoX4aHG7X1fULdPd2qc1r",
	"nc+HaQiNY2LioCoDMOoRxq04Wg4nlj1iRKG3OHH8tQEwNRVmoRgzhtWzNWoRsNPwP0PkW+x4thyDn5Rn",
	"vZHx5jks4UpciFO4hqVuuodZIkFbnN6EcvoNszVpKstSfmsGErerExAW09g+UpvP+C0slDBwkM2nh89I",
	"bDBOL3k8OQ6Iz+uqpQyu4KY+1ExCBfgadFkQaQBXLSpqSEoePmv2jy5bkPRaQ1LyvxENDm2Su5AbOIeE",
	"6bdbRlVYKjXcL++rBT151NgwPx2P2X9EowKxMS5r5U+ZQ4f4Ph6T9b6cvqhbo7Gg0eqVPL1jkKzAK9he",
	"jbBUt2Db/uoImfutQcyqpg8aS40PvtrZVxvKnDKTW0szmeEGaI21TCsvr3H+Lu6cbumDm7X0LWnQco+o",
	"XLxW18Z3yqU4q9S1EpbFVV2VEN57SthJvOAJYX5sYbAz2Lknt0c94mLPQiZ6sDPYeSDRYT5RuhhlrxgT",
	"rkHS9T6mVmSqcH4yQmY5DKvV8xbFftI4OA4Im+adAwdbksVa8+GQUptgVwqhn2gTfLR64kGlnXB/MGg6",
	"qdl7TZfXPnrYZnb1Ut5HfuA4WJbrd2GX47FkLi/6ZbD3qK/T7leI4C+YKz9Sl1J557sUF+Kl7n5aVW6P",
	"+mXpWFwTfkpH0w13XKolcVg+a5wFJKwpd0+z41/Emfi5J75Tm4rEC4g2o1NXJjUqhf3igTPSq4MxK0aJ",
	"8K4HsemquPI47iYYdstdwMoR1dGWv2KUgtydD1jDlXn7Z6yZuPUavk/p3r9k9b7Y/1CtYmF2B3Fqubcm",
	"yV5+72+R2mzLsbguRVkuJ2NVZNxVjnq/bOty1CuTRIS0FGyVm26yzmOpS65LRwWyt5eMKh2Q9rloNc0N",
	"3xY2m50auawrUzwdxiz7WhPGWtmEE41qr9Q3jZaKPVZWUs32Ct+DuoWr/EuS5nA81KEsNrk3Q/Gajesc",
	"f1246dRvXxF5tkRsp6izraDTkSONl0vLhJ2kjJTV+IIOsd2Lx1EfBfKKiCace6Zh2HJsQn1uPho8um+g",
	"8CD8NwAA//8pigI8bx0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

