// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYz2/bNhT+VwxuRy1yfxwKH9cOQ4FhCDrsVOTAyC+2CklUKCpYEAjIj27rYSi2YecN",
	"Qw+7esmMaUmj/guP/9FASrIki4rlwL4VKIrIFB+/9338nh55QhzmhyyAQERkdEJCyqkPAnj+xNk4dsTz",
	"Z+rBDciIhFRMiUUC6oN6WoxbhMNh7HIYk5HgMVgkcqbgUzXxgHGfCjIiceyOiUXEcagmR4K7wYQkSaIm",
	"RyELItCrPuVABezmsV8UI2rAYYGAQKg/aRh6rkOFywL7VcQC9Vu14qccDsiIfGJXydn5aGSbo2sUY4gc",
	"7oYqKBkR/F2e4yXO5flAnuFcnuqHU5wN8BZn6rcM/8V/cIa3mOJ8IM8xw0ucqVdIYpEvOGd84/CbUU2w",
	"/1JAPlP/KaAa1wyvFaIvQTylAiaMuxBtHJk5ugnhH5jhjbyQP2Iqz+VPisoPmGpCrwd4jTN5jnO8wkye",
	"Yor/FdC3tSEMoU2g32mUc/kGbzHD+QA/LLKYFzsAU7yVrzXs9ziTP2CK6QCz+s6YN5OJtpjN3Rr8WaO8",
	"hi/Dy4H6l4swwxvM8EqhTkpH5xbNhT4uikQIXLi5eZ2p6405BNVW0LVDgB+tdGYZNFnUCMo51c/uuEcl",
	"KevSCYHvqB96agx/1uK8V0Z4jSleyQt5iteYmqaHlEMg6sn1xVtUwv7JFiK1c03qpfQl0XkaSC1y3VtM",
	"Z/uvII+XV7gS3Qs4jCESbaVKrnqwsKqCNyGvALYwWwcup1j46y58jZ180r0JDImJqXmAuw40Eh2zeN+D",
	"KtUg9veBm1NtIrLKb2Qe1Grm04OWqiBsmJc1PdRmacoE+5Z7m6VQgzDzWK63Bpetj26TQx+iiE5M6S2h",
	"Kl80rdH5GTXqtVwBW8zdaf9akA4oH/fNJvZNxye5yeTWivwisAlaGeSjsD3VVAHd4ICpxVtdT97Hp/Js",
	"qetRsFyhW4aC8ME3wI/yBY+AR3mE4c5w54FKj4UQ0NAlI/JoZ7jzqCj7Whe76fwJCAOSdXtgvSLXHeHz",
	"MRk1i5BevTq4vSwOa4cx8OPqtOZTV7FY9ZEFb/uMeUADkiR7Syexh8Nh1xZfvNfV91vkcZ/Zy+cZi0Sx",
	"71PVd9yHJEEnioCqQd1TW5FFJgl+wwz/xpneDiq6buwv5YV824ot37YE2GVRUwGeNzSfs/Hxhg+ry61c",
	"0rSMOm8nLeUeGDL+VZ7JXwbye51UJt9gthmd1mXSoFJiEbteX+/hmpahW44pS3w/v3iu7wqTYdxAwERX",
	"rvsapn1E27pd2uWuEKH8vvRyys3isNu47jCZo0b29qyxdJjo74y7ae64JNqsVzq5bCtTd4d9srh2S3Kt",
	"PBBgUO2dvpzqqdgzHaXUbLd2sbfkFFPq1St2dSVoMMdjE8r6vcpmKF6RuGnjryo3a13x3FF5tkTsWlVn",
	"W0VnTY4Mu1xFBn5UMtJU4yvmUG+QjxOLxKrvJFMhwpFte2psyiIxejJ88tAmyV7yfwAAAP//agST6doW",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

