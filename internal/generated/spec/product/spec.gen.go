// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXS2vkRhD+K6KTo2LNPg6LjsmGsBCCSchp8aEtlWd6kdRyd8vEGIHtXZIccsgh54Sw",
	"h1wn3gwRfsh/ofSPQrc0esy0PTMwc8qCMdOq7uqvvnp01RkJeJzyBBIliX9GUipoDApEvRI8zAL16qVe",
	"sIT4JKVqQlyS0Bj0qpW7RMBxxgSExFciA5fIYAIx1QePuIipIj7JMhYSl6jTVB+WSrBkTPI814dlyhMJ",
	"5tYvBFAF+7XubxuJFgQ8UZAo/ZOmacQCqhhPvDeSJ/pbd+OnAo6ITz7xOuO8Wio9u3aDIgQZCJZqpcQn",
	"+Ht1iVc4qy6d6gJn1blZnOPUwTuc6m8l/ov/4BTvsMCZU11iiVc41VtI7pIvheBi6/CHWm2w/9JAPtP/",
	"NFCDa4rXGtFXoHbFqkW1Ddv76gLvcVb9jHdY4szBeyzxpnpb/YSzhkYs8K56h2V1jrc4rX7EAgsHyz69",
	"s6ExcofWyEfN+RPvsTCBcN3HV+KVo/+ucWrIv8ESP2jU+Twt6jinCsZcnDaZloJQrM6AYMKiUEDS7Gi+",
	"MgWxXBnec6V5m2hUCGrWddaeEfiBxmmkRfirYf1Wh8k7LPBD9bY6x2ssltPU1bUBEtVHvS6Qpk6sb0XD",
	"/rIReb/QvLYR1Zh50J7kh2+gVrWQ+scZSGUhvwH+TcPWEg+DILDIk4cOmuJpFQgWwKBUhjw7jKDzQpLF",
	"hyCW7DdXDRG58xpdK3WH9qxBS5dLW+aFhWu8Bo/RN+GKfy+i7VJoQNh5nN+3AZdLRX/IYQxS0rHNvAVU",
	"8422O+xl/KOzNnbWA0/IkMmd1a5WsQ3aXMn/0bE9Vy74eD3Hat0sOeIax9KDXfdxRXWx8GBrhEyZR7Hh",
	"3vkOxEl94QkIWWsY7Y32nmhLeQoJTRnxybO90d6zpuwaF3n9kBmDsuD4o217iuqy+sUxbZG9kyDmLmHa",
	"mFch8ftRa27tGvbXTZN+nIE47br0iMVMkX5H3hDGEgVj44yDhRb86Wj0UJi3++xdkkuer3N2sY11iczi",
	"mOq2YlN2FB1r29uUOdBxyKWN9t+wxL9xild40/abg7Z9ket9Lvtki7pn+JyHp7uaR+qmJB/mh56o8iUX",
	"PVlN8wPDzjactAaXy57J3S47vLN2fMxrX0WgwOK192bIWtNjL42Wuc/2ewPqQqbYTO+2eN1oa0mO5zaU",
	"/dFmOxSvMNwW+KvKzUZT1iOVZ0fEblR1dlV0NuTIEuVaM4iTOSNDb3zNAxo5tZy4JNNPKZkolfqeF2nZ",
	"hEvlvxi9eOqR/CD/LwAA//9Kuh0vohEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

