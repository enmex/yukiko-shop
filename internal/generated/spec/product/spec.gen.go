// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZTY/bRBj+K9HA0azTj0PlI1uEKiFYUXGq9jCbzCaubI93PF4RRZb2o0APqALEGYR6",
	"4Bp2GxF2u+5feOcfoRl/x+PEjhLKoVJVrWP7ned9nnfej/EUDajrU494PEDWFPmYYZdwwtTVAHMyomzy",
	"JXaJvLY9ZCEf8zEykKd+qz5iIEZOQpuRIbI4C4mBgsGYuFi+yye+fD7gzPZGKIoM5DM6DAf8yeMG08X9",
	"VXaPKXMxRxYKQ3uIjNo6kXw58KkXEOXTPiOYk4PE9tfpHeUs9TjxuPwT+75jDzC3qWc+D6gnfytW/JiR",
	"Y2Shj8yCOjO5G5h66wrFkAQDZvvSKLIQ/CYu4Arm4qInzmEuztTFGcx6cAcz+VsMf8MbmMEdLGDeExcQ",
	"wxXM5CMoMtBnjFG2dfhVqzrYf0ogn8j/JFCFawY3EtHnhO8nwWCTYOvI9NZ1CH+HGG7FpfgBFuJC/Cip",
	"fAcLRehND25gJi5gDtcQizNYwD9V6JMdAp90gr2MVLxKke4qdDWmdThfKz7n4iXcQQzzHrzLgc/TWIUF",
	"3IkXCvZbmInvYQGLHsTlGJ5XnQl26M3qaPmjFBwlfDFc9eS/RIQZ3EIM1znqp+HRbkNdv0D3aJfavNHF",
	"fJSl0CQnpgGqKgCjPmHcTrLlYGw7Q0YUepsTN1ibADNTUZ6KMWNYXdvDFgk7S/9TRL7Fru/Ie/CTiqy3",
	"Mt+8gAVci0txBjew0L3uY5ZK0BZnWmiC1k6mkVX3MSpXqmdI+ZdTWFoodfIwf58ePSeJwaSCFCnjJCQB",
	"rwuTkbTC/XrFLWNbAyBPBQ3rL7cGNRyVOJ02q6xxgI/1N5g9IJUIGtLwyCFFEHihe0SY3tUqIiPrNRKj",
	"RtWfFrQUe37LvHTcJHWWxpTTb5izXQoVCD2P2XoduKw1L1UOXRIEeETWx3D2oG6NxnZEq1d6le/+GnMr",
	"93nJyGoolfYCO85Xx8h61jpRTZdNHzZ2BB+CsnNQNnQjVSZ3Vipyww3QGluO/z6cM5c+hFnL2JIGbe+Y",
	"ysVr7Wcy+i3E+VL7KWHZXLU/KeG9p4SdJgueEhYkFvp7/b170j3qEw/7NrLQg73+3oO0wildzGpUjAjX",
	"IOk6NqkVmepvnwyRVc23avXiJOFZOt+fhIRNigHfxbZksXZGcESpQ7AnhdC/6BB8vPrFw6Wp/36/37RT",
	"8+eaZkwDPWzz9vLsbKAgdF0su+pN2OV4JJkrenOZ7H0a6LT7FWL4C2YqjtTsKEezK3EpXunGyGXlDmhQ",
	"lY4lTd+ndDjZ8sHIclsbVfcaZyGJasrd03j8izgXP/fEd8qpWLyEeDs6dWVSo1JklDecmbX/5rScJaJN",
	"N2LTRLdyO+6nGParh3VLW1RHW/GIWUlyG2+whsl293usmbj1Gr5P6d6/ZPXjq/+hWuXGbANxarW3JslB",
	"Mbu3KG2O7dpcV6Jsj5ORajI2laN+rLVzOeqdSSpC1gq2qk23+QFh5TBbV45KZO+uGC0dcbSvRatpbvgE",
	"sN3q1MhlXZny7jCn+UeVKNHKIZxoVHutPj20VOyxspJpdlD6bNMtXRUffDSb46EOZfksejsUr3FcF/jr",
	"0k2nY/EVmWdHxHbKOrtKOh050kS5tEzYacZIVY0v6AA7veQ+MlAoR0Q05ty3TNOR98Y04Naj/qP7JooO",
	"o38DAAD//zwdZqgWHQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

