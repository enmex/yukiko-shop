// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZT2/bNhT/Kga3oxe5fw6Fj0uHocCwBSt2KnJgbMZWIYkKRQUzDAH50209DMU27Lxh",
	"6GFXL6kxL2nUr/D4jQZS/yXKlhIL3YACRRGZ4uPv/X6Pj49PczSitksd4nAPDefIxQzbhBOmnkaYkwll",
	"sy+xTeSz6aAhcjGfoj5y1G/FV/qIkSPfZGSMhpz5pI+80ZTYWM7lM1e+73FmOhMUBH3kMjr2R/zJ4xrT",
	"2fg6u4eU2ZijIfJ9c4z6lXUCOdlzqeMR5dMuI5iTvcj21/GIcpY6nDhc/old1zJHmJvUMZ571JG/ZSt+",
	"zMghGqKPjIw6Ixr1DL11hWJMvBEzXWkUDRH8Js7gApbirCdOYSlO1MMJLHpwAwv5Wwh/wxtYwA2sYNkT",
	"ZxDCBSzkKyjoo88Yo2zr8ItWdbD/lEA+kf9JoArXAq4kos8J342CwSTe1pHpresQ/g4hXItz8QOsxJn4",
	"UVL5DlaK0KseXMFCnMESLiEUJ7CCf4rQZx0Cn7WCXUYqXsVIuwpdjWkdzteKz6V4CTcQwrIH71LgyzhW",
	"YQU34oWC/RYW4ntYwaoHYT6Gl0VnvA69WR8tf+SCI4cvhIue/BeJsIBrCOEyRf3UP+g21PULtI92qc0b",
	"XcwHSQqNcmIcoOoEYNQljJtRthxNTWvMiEJvcmJ7GxNgYipIUzFmDKtnc9wgYSfpf47It9h2LTkGP6nI",
	"eivzzQtYwaU4FydwBSvddBezWIKmON0p5fQbZmmOqfSU8hozEIddlYAgf4w9Q8r5lN/cQjED++l8evCc",
	"RAaj4yXLJ0c+8XhVtZZEr6GwOlTPlc6/DZ6kCafGkXIBUoFT2A2a8YiJFp6vDwVzRArMjql/YJGMW8e3",
	"DwhbQ0URcW69xHq/6HMD6rLs0wl3d4ii/wGXlTKqyKFNPA9PyOZgT17UrVFbGGn1Srbw3ZJtCV7O9nqE",
	"hfoHW9ZXh2j4rDGIedn0fm3J8iFWW8dqTblUZLKz4yo1XAOttiZqFOUVzu8SzolLH8KsYWxJg6ZzSOXi",
	"lfo4upuuxGmpPpawTK7qs5jw3lPCjqMFjwnzIguDncHOPekedYmDXRMN0YOdwc4DiQ7zqdLFKEbFhHAN",
	"krb3OrUiUwX4kzEaFtOwWj1rdTyLGxBHPmGzrANhY1OyWGliHFBqEexIIfQTLYIP10/cL7Ul7g8GdTs1",
	"fa/uEtxHD5vMLl/u+8jzbRvLsv827HI8kcxllweZ7F3q6bT7FUL4CxYqjtTlVt4dL8S5eKW755aV26Ne",
	"UToW1Yuf0vFsy52bcmkdFPcaZz4JKsrd03j8izgVP/fEd8qpULyEcDs6tWVSo1LQz284I7mCGPN8lghu",
	"uxHrrpxrt+NujGG32E0sbVEdbdkrRiHJ3XqD1Vy9u99j9cRt1vB9Svf+Jav21/6DauULs1uIUzl7K5Ls",
	"Zf2DBkebZdom1x1RpsPJRBUZt5Wj2nfrXI5qZRKLkJSCjc6m67SDWei2646jHNndHUal7kjzs2g9zTXf",
	"KLZ7OtVyWVUmvzuMefrVJ4i0sggnGtVeq28jDRV7rKwkmu3lviu1S1fZFynN5nioQ5lvlm+H4g2O6wJ/",
	"U7pp1bdfk3k6IrZV1ukq6bTkSBPl0jJhxwkjRTW+oCNs9aJx1Ee+vCKiKefu0DAsOTalHh8+Gjy6b6Bg",
	"P/g3AAD//7yO8XC3HQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
