// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CartProductsColumns holds the columns for the "cart_products" table.
	CartProductsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "photo_url", Type: field.TypeString, Nullable: true},
		{Name: "price", Type: field.TypeFloat64},
		{Name: "quantity", Type: field.TypeInt},
		{Name: "product_id", Type: field.TypeUUID},
		{Name: "customer_id", Type: field.TypeUUID},
	}
	// CartProductsTable holds the schema information for the "cart_products" table.
	CartProductsTable = &schema.Table{
		Name:       "cart_products",
		Columns:    CartProductsColumns,
		PrimaryKey: []*schema.Column{CartProductsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cart_products_products_products_in_cart",
				Columns:    []*schema.Column{CartProductsColumns[5]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "cart_products_users_products_in_cart",
				Columns:    []*schema.Column{CartProductsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "photo_url", Type: field.TypeString, Nullable: true},
		{Name: "parent_category", Type: field.TypeUUID, Nullable: true},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:       "categories",
		Columns:    CategoriesColumns,
		PrimaryKey: []*schema.Column{CategoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "categories_categories_children",
				Columns:    []*schema.Column{CategoriesColumns[3]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProductsColumns holds the columns for the "products" table.
	ProductsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString},
		{Name: "photo_url", Type: field.TypeString, Nullable: true},
		{Name: "price", Type: field.TypeFloat64},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "category_id", Type: field.TypeUUID},
	}
	// ProductsTable holds the schema information for the "products" table.
	ProductsTable = &schema.Table{
		Name:       "products",
		Columns:    ProductsColumns,
		PrimaryKey: []*schema.Column{ProductsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "products_categories_products",
				Columns:    []*schema.Column{ProductsColumns[6]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "access_type", Type: field.TypeEnum, Enums: []string{"ADMIN", "MANAGER", "CUSTOMER"}, Default: "CUSTOMER"},
		{Name: "password", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CartProductsTable,
		CategoriesTable,
		ProductsTable,
		UsersTable,
	}
)

func init() {
	CartProductsTable.ForeignKeys[0].RefTable = ProductsTable
	CartProductsTable.ForeignKeys[1].RefTable = UsersTable
	CategoriesTable.ForeignKeys[0].RefTable = CategoriesTable
	ProductsTable.ForeignKeys[0].RefTable = CategoriesTable
}
