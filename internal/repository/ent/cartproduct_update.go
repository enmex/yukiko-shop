// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"yukiko-shop/internal/repository/ent/cartproduct"
	"yukiko-shop/internal/repository/ent/predicate"
	"yukiko-shop/internal/repository/ent/product"
	"yukiko-shop/internal/repository/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CartProductUpdate is the builder for updating CartProduct entities.
type CartProductUpdate struct {
	config
	hooks    []Hook
	mutation *CartProductMutation
}

// Where appends a list predicates to the CartProductUpdate builder.
func (cpu *CartProductUpdate) Where(ps ...predicate.CartProduct) *CartProductUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetName sets the "name" field.
func (cpu *CartProductUpdate) SetName(s string) *CartProductUpdate {
	cpu.mutation.SetName(s)
	return cpu
}

// SetProductID sets the "product_id" field.
func (cpu *CartProductUpdate) SetProductID(u uuid.UUID) *CartProductUpdate {
	cpu.mutation.SetProductID(u)
	return cpu
}

// SetCustomerID sets the "customer_id" field.
func (cpu *CartProductUpdate) SetCustomerID(u uuid.UUID) *CartProductUpdate {
	cpu.mutation.SetCustomerID(u)
	return cpu
}

// SetPhotoURL sets the "photo_url" field.
func (cpu *CartProductUpdate) SetPhotoURL(s string) *CartProductUpdate {
	cpu.mutation.SetPhotoURL(s)
	return cpu
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (cpu *CartProductUpdate) SetNillablePhotoURL(s *string) *CartProductUpdate {
	if s != nil {
		cpu.SetPhotoURL(*s)
	}
	return cpu
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (cpu *CartProductUpdate) ClearPhotoURL() *CartProductUpdate {
	cpu.mutation.ClearPhotoURL()
	return cpu
}

// SetPrice sets the "price" field.
func (cpu *CartProductUpdate) SetPrice(f float64) *CartProductUpdate {
	cpu.mutation.ResetPrice()
	cpu.mutation.SetPrice(f)
	return cpu
}

// AddPrice adds f to the "price" field.
func (cpu *CartProductUpdate) AddPrice(f float64) *CartProductUpdate {
	cpu.mutation.AddPrice(f)
	return cpu
}

// SetQuantity sets the "quantity" field.
func (cpu *CartProductUpdate) SetQuantity(i int) *CartProductUpdate {
	cpu.mutation.ResetQuantity()
	cpu.mutation.SetQuantity(i)
	return cpu
}

// AddQuantity adds i to the "quantity" field.
func (cpu *CartProductUpdate) AddQuantity(i int) *CartProductUpdate {
	cpu.mutation.AddQuantity(i)
	return cpu
}

// SetCustomer sets the "customer" edge to the User entity.
func (cpu *CartProductUpdate) SetCustomer(u *User) *CartProductUpdate {
	return cpu.SetCustomerID(u.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (cpu *CartProductUpdate) SetProduct(p *Product) *CartProductUpdate {
	return cpu.SetProductID(p.ID)
}

// Mutation returns the CartProductMutation object of the builder.
func (cpu *CartProductUpdate) Mutation() *CartProductMutation {
	return cpu.mutation
}

// ClearCustomer clears the "customer" edge to the User entity.
func (cpu *CartProductUpdate) ClearCustomer() *CartProductUpdate {
	cpu.mutation.ClearCustomer()
	return cpu
}

// ClearProduct clears the "product" edge to the Product entity.
func (cpu *CartProductUpdate) ClearProduct() *CartProductUpdate {
	cpu.mutation.ClearProduct()
	return cpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *CartProductUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cpu.hooks) == 0 {
		if err = cpu.check(); err != nil {
			return 0, err
		}
		affected, err = cpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CartProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cpu.check(); err != nil {
				return 0, err
			}
			cpu.mutation = mutation
			affected, err = cpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cpu.hooks) - 1; i >= 0; i-- {
			if cpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *CartProductUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *CartProductUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *CartProductUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpu *CartProductUpdate) check() error {
	if _, ok := cpu.mutation.CustomerID(); cpu.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CartProduct.customer"`)
	}
	if _, ok := cpu.mutation.ProductID(); cpu.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CartProduct.product"`)
	}
	return nil
}

func (cpu *CartProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cartproduct.Table,
			Columns: cartproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: cartproduct.FieldID,
			},
		},
	}
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cartproduct.FieldName,
		})
	}
	if value, ok := cpu.mutation.PhotoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cartproduct.FieldPhotoURL,
		})
	}
	if cpu.mutation.PhotoURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cartproduct.FieldPhotoURL,
		})
	}
	if value, ok := cpu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cartproduct.FieldPrice,
		})
	}
	if value, ok := cpu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cartproduct.FieldPrice,
		})
	}
	if value, ok := cpu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cartproduct.FieldQuantity,
		})
	}
	if value, ok := cpu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cartproduct.FieldQuantity,
		})
	}
	if cpu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.CustomerTable,
			Columns: []string{cartproduct.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.CustomerTable,
			Columns: []string{cartproduct.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.ProductTable,
			Columns: []string{cartproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.ProductTable,
			Columns: []string{cartproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cartproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CartProductUpdateOne is the builder for updating a single CartProduct entity.
type CartProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CartProductMutation
}

// SetName sets the "name" field.
func (cpuo *CartProductUpdateOne) SetName(s string) *CartProductUpdateOne {
	cpuo.mutation.SetName(s)
	return cpuo
}

// SetProductID sets the "product_id" field.
func (cpuo *CartProductUpdateOne) SetProductID(u uuid.UUID) *CartProductUpdateOne {
	cpuo.mutation.SetProductID(u)
	return cpuo
}

// SetCustomerID sets the "customer_id" field.
func (cpuo *CartProductUpdateOne) SetCustomerID(u uuid.UUID) *CartProductUpdateOne {
	cpuo.mutation.SetCustomerID(u)
	return cpuo
}

// SetPhotoURL sets the "photo_url" field.
func (cpuo *CartProductUpdateOne) SetPhotoURL(s string) *CartProductUpdateOne {
	cpuo.mutation.SetPhotoURL(s)
	return cpuo
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (cpuo *CartProductUpdateOne) SetNillablePhotoURL(s *string) *CartProductUpdateOne {
	if s != nil {
		cpuo.SetPhotoURL(*s)
	}
	return cpuo
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (cpuo *CartProductUpdateOne) ClearPhotoURL() *CartProductUpdateOne {
	cpuo.mutation.ClearPhotoURL()
	return cpuo
}

// SetPrice sets the "price" field.
func (cpuo *CartProductUpdateOne) SetPrice(f float64) *CartProductUpdateOne {
	cpuo.mutation.ResetPrice()
	cpuo.mutation.SetPrice(f)
	return cpuo
}

// AddPrice adds f to the "price" field.
func (cpuo *CartProductUpdateOne) AddPrice(f float64) *CartProductUpdateOne {
	cpuo.mutation.AddPrice(f)
	return cpuo
}

// SetQuantity sets the "quantity" field.
func (cpuo *CartProductUpdateOne) SetQuantity(i int) *CartProductUpdateOne {
	cpuo.mutation.ResetQuantity()
	cpuo.mutation.SetQuantity(i)
	return cpuo
}

// AddQuantity adds i to the "quantity" field.
func (cpuo *CartProductUpdateOne) AddQuantity(i int) *CartProductUpdateOne {
	cpuo.mutation.AddQuantity(i)
	return cpuo
}

// SetCustomer sets the "customer" edge to the User entity.
func (cpuo *CartProductUpdateOne) SetCustomer(u *User) *CartProductUpdateOne {
	return cpuo.SetCustomerID(u.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (cpuo *CartProductUpdateOne) SetProduct(p *Product) *CartProductUpdateOne {
	return cpuo.SetProductID(p.ID)
}

// Mutation returns the CartProductMutation object of the builder.
func (cpuo *CartProductUpdateOne) Mutation() *CartProductMutation {
	return cpuo.mutation
}

// ClearCustomer clears the "customer" edge to the User entity.
func (cpuo *CartProductUpdateOne) ClearCustomer() *CartProductUpdateOne {
	cpuo.mutation.ClearCustomer()
	return cpuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (cpuo *CartProductUpdateOne) ClearProduct() *CartProductUpdateOne {
	cpuo.mutation.ClearProduct()
	return cpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *CartProductUpdateOne) Select(field string, fields ...string) *CartProductUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated CartProduct entity.
func (cpuo *CartProductUpdateOne) Save(ctx context.Context) (*CartProduct, error) {
	var (
		err  error
		node *CartProduct
	)
	if len(cpuo.hooks) == 0 {
		if err = cpuo.check(); err != nil {
			return nil, err
		}
		node, err = cpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CartProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cpuo.check(); err != nil {
				return nil, err
			}
			cpuo.mutation = mutation
			node, err = cpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cpuo.hooks) - 1; i >= 0; i-- {
			if cpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *CartProductUpdateOne) SaveX(ctx context.Context) *CartProduct {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *CartProductUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *CartProductUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpuo *CartProductUpdateOne) check() error {
	if _, ok := cpuo.mutation.CustomerID(); cpuo.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CartProduct.customer"`)
	}
	if _, ok := cpuo.mutation.ProductID(); cpuo.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CartProduct.product"`)
	}
	return nil
}

func (cpuo *CartProductUpdateOne) sqlSave(ctx context.Context) (_node *CartProduct, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cartproduct.Table,
			Columns: cartproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: cartproduct.FieldID,
			},
		},
	}
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CartProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cartproduct.FieldID)
		for _, f := range fields {
			if !cartproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cartproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cartproduct.FieldName,
		})
	}
	if value, ok := cpuo.mutation.PhotoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cartproduct.FieldPhotoURL,
		})
	}
	if cpuo.mutation.PhotoURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cartproduct.FieldPhotoURL,
		})
	}
	if value, ok := cpuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cartproduct.FieldPrice,
		})
	}
	if value, ok := cpuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cartproduct.FieldPrice,
		})
	}
	if value, ok := cpuo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cartproduct.FieldQuantity,
		})
	}
	if value, ok := cpuo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cartproduct.FieldQuantity,
		})
	}
	if cpuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.CustomerTable,
			Columns: []string{cartproduct.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.CustomerTable,
			Columns: []string{cartproduct.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.ProductTable,
			Columns: []string{cartproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.ProductTable,
			Columns: []string{cartproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CartProduct{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cartproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
