// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"yukiko-shop/internal/repository/ent/category"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Category is the model entity for the Category schema.
type Category struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID uuid.UUID `json:"category_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CategoryQuery when eager-loading is set.
	Edges CategoryEdges `json:"edges"`
}

// CategoryEdges holds the relations/edges for other nodes in the graph.
type CategoryEdges struct {
	// ParentCategory holds the value of the parentCategory edge.
	ParentCategory *Category `json:"parentCategory,omitempty"`
	// ChildrenCategories holds the value of the childrenCategories edge.
	ChildrenCategories []*Category `json:"childrenCategories,omitempty"`
	// Products holds the value of the products edge.
	Products []*Product `json:"products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ParentCategoryOrErr returns the ParentCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CategoryEdges) ParentCategoryOrErr() (*Category, error) {
	if e.loadedTypes[0] {
		if e.ParentCategory == nil {
			// The edge parentCategory was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: category.Label}
		}
		return e.ParentCategory, nil
	}
	return nil, &NotLoadedError{edge: "parentCategory"}
}

// ChildrenCategoriesOrErr returns the ChildrenCategories value or an error if the edge
// was not loaded in eager-loading.
func (e CategoryEdges) ChildrenCategoriesOrErr() ([]*Category, error) {
	if e.loadedTypes[1] {
		return e.ChildrenCategories, nil
	}
	return nil, &NotLoadedError{edge: "childrenCategories"}
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e CategoryEdges) ProductsOrErr() ([]*Product, error) {
	if e.loadedTypes[2] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Category) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case category.FieldName:
			values[i] = new(sql.NullString)
		case category.FieldID, category.FieldCategoryID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Category", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Category fields.
func (c *Category) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case category.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case category.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case category.FieldCategoryID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value != nil {
				c.CategoryID = *value
			}
		}
	}
	return nil
}

// QueryParentCategory queries the "parentCategory" edge of the Category entity.
func (c *Category) QueryParentCategory() *CategoryQuery {
	return (&CategoryClient{config: c.config}).QueryParentCategory(c)
}

// QueryChildrenCategories queries the "childrenCategories" edge of the Category entity.
func (c *Category) QueryChildrenCategories() *CategoryQuery {
	return (&CategoryClient{config: c.config}).QueryChildrenCategories(c)
}

// QueryProducts queries the "products" edge of the Category entity.
func (c *Category) QueryProducts() *ProductQuery {
	return (&CategoryClient{config: c.config}).QueryProducts(c)
}

// Update returns a builder for updating this Category.
// Note that you need to call Category.Unwrap() before calling this method if this Category
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Category) Update() *CategoryUpdateOne {
	return (&CategoryClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Category entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Category) Unwrap() *Category {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Category is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Category) String() string {
	var builder strings.Builder
	builder.WriteString("Category(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", category_id=")
	builder.WriteString(fmt.Sprintf("%v", c.CategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// Categories is a parsable slice of Category.
type Categories []*Category

func (c Categories) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
